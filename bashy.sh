#!/usr/bin/env bash

# Bashy: simple dev service manager for macOS launchd with local domain support
# - Keeps your dev server running across restarts via a LaunchAgent
# - Registers/unregisters a local domain in /etc/hosts (requires sudo)
# - Stores config in .bashy.env at project root

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="${SCRIPT_DIR}"
CONFIG_FILE="${PROJECT_DIR}/.bashy.env"
LAUNCH_AGENTS_DIR="${HOME}/Library/LaunchAgents"
LOGS_DIR="${HOME}/.bashy/logs"
mkdir -p "${LOGS_DIR}" "${LAUNCH_AGENTS_DIR}"

# Defaults (can be overridden by .bashy.env)
DEFAULT_NAME="$(basename "${PROJECT_DIR}" | tr '[:space:]' '-' | tr -cd '[:alnum:]-_.' | tr '[:upper:]' '[:lower:]')"
DEFAULT_PORT="5173"
DEFAULT_DOMAIN="${DEFAULT_NAME}.local"
DEFAULT_WORKDIR="${PROJECT_DIR}"

# If package.json exists, prefer an npm dev command; otherwise fall back to python http.server
if [[ -f "${PROJECT_DIR}/package.json" ]]; then
  DEFAULT_COMMAND="npm run dev -- --host 0.0.0.0 --port ${DEFAULT_PORT}"
else
  DEFAULT_COMMAND="python3 -m http.server ${DEFAULT_PORT} --bind 127.0.0.1"
fi

# Loaded config vars (with defaults)
BASHY_NAME="${DEFAULT_NAME}"
BASHY_PORT="${DEFAULT_PORT}"
BASHY_DOMAIN="${DEFAULT_DOMAIN}"
BASHY_WORKDIR="${DEFAULT_WORKDIR}"
BASHY_COMMAND="${DEFAULT_COMMAND}"
BASHY_ENV_EXTRA="" # optional K=V,K=V pairs (comma-separated)

LABEL() { echo "dev.bashy.${BASHY_NAME}"; }
PLIST_PATH() { echo "${LAUNCH_AGENTS_DIR}/$(LABEL).plist"; }
LOG_FILE() { echo "${LOGS_DIR}/${BASHY_NAME}.log"; }

print_info() { printf "[bashy] %s\n" "$*"; }
print_err() { printf "[bashy] ERROR: %s\n" "$*" 1>&2; }

usage() {
  cat <<'EOF'
Bashy - automate front-end dev serving with local domain and persistence (macOS)

Usage:
  ./bashy.sh init [--name NAME] [--domain DOMAIN] [--port PORT] [--workdir DIR] [--command CMD] [--env "K=V,K=V"]
  ./bashy.sh install                 # write LaunchAgent from .bashy.env and load it (starts at login)
  ./bashy.sh uninstall               # unload and remove LaunchAgent
  ./bashy.sh start|stop|restart      # control the LaunchAgent process
  ./bashy.sh status                  # show launchd status
  ./bashy.sh logs [--follow]         # show logs (tail -f with --follow)
  ./bashy.sh register-domain [IP]    # add DOMAIN -> IP (default 127.0.0.1) in /etc/hosts (sudo)
  ./bashy.sh unregister-domain       # remove DOMAIN entry from /etc/hosts (sudo)
  ./bashy.sh config                  # print effective config
  ./bashy.sh help

Notes:
  - Edit .bashy.env to customize. ENV vars exported to your command: PORT, HOST.
  - Vite/Vue example: npm run dev -- --host 0.0.0.0 --port $PORT
  - Next.js example: npm run dev -p $PORT -H 0.0.0.0
EOF
}

load_env() {
  if [[ -f "${CONFIG_FILE}" ]]; then
    # shellcheck disable=SC1090
    source "${CONFIG_FILE}"
  fi
  # Ensure fallbacks if any are empty
  : "${BASHY_NAME:=${DEFAULT_NAME}}"
  : "${BASHY_PORT:=${DEFAULT_PORT}}"
  : "${BASHY_DOMAIN:=${DEFAULT_DOMAIN}}"
  : "${BASHY_WORKDIR:=${DEFAULT_WORKDIR}}"
  : "${BASHY_COMMAND:=${DEFAULT_COMMAND}}"
  : "${BASHY_ENV_EXTRA:=''}"
}

write_config() {
  cat > "${CONFIG_FILE}" <<EOF
# Auto-generated by bashy.sh init
BASHY_NAME="${BASHY_NAME}"
BASHY_PORT="${BASHY_PORT}"
BASHY_DOMAIN="${BASHY_DOMAIN}"
BASHY_WORKDIR="${BASHY_WORKDIR}"
BASHY_COMMAND="${BASHY_COMMAND}"
# Optional extra environment variables for the service (comma-separated K=V pairs)
BASHY_ENV_EXTRA="${BASHY_ENV_EXTRA}"
EOF
  print_info "Wrote config ${CONFIG_FILE}"
}

parse_kv_csv_to_plist_env() {
  local csv="$1"
  if [[ -z "${csv}" ]]; then return 0; fi
  # Expect comma-separated K=V pairs
  IFS=',' read -r -a pairs <<< "${csv}"
  for pair in "${pairs[@]}"; do
    local key="${pair%%=*}"
    local val="${pair#*=}"
    [[ -z "${key}" ]] && continue
    printf "      <key>%s</key>\n      <string>%s</string>\n" "${key}" "${val}"
  done
}

write_plist() {
  load_env
  local plist="$(PLIST_PATH)"
  local label="$(LABEL)"
  local log_file="$(LOG_FILE)"
  mkdir -p "${LAUNCH_AGENTS_DIR}"
  mkdir -p "${LOGS_DIR}"

  cat > "${plist}" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>${label}</string>

  <key>ProgramArguments</key>
  <array>
    <string>/bin/zsh</string>
    <string>-lc</string>
    <string>cd '${BASHY_WORKDIR}' && ${BASHY_COMMAND}</string>
  </array>

  <key>EnvironmentVariables</key>
  <dict>
    <key>PORT</key>
    <string>${BASHY_PORT}</string>
    <key>HOST</key>
    <string>${BASHY_DOMAIN}</string>
$(parse_kv_csv_to_plist_env "${BASHY_ENV_EXTRA}")  </dict>

  <key>WorkingDirectory</key>
  <string>${BASHY_WORKDIR}</string>
  <key>RunAtLoad</key>
  <true/>
  <key>KeepAlive</key>
  <true/>
  <key>StandardOutPath</key>
  <string>${log_file}</string>
  <key>StandardErrorPath</key>
  <string>${log_file}</string>
</dict>
</plist>
EOF
  print_info "Wrote LaunchAgent ${plist}"
}

install_agent() {
  write_plist
  local plist="$(PLIST_PATH)"
  # unload if already loaded
  if launchctl list | grep -q "$(LABEL)"; then
    launchctl unload -w "${plist}" || true
  fi
  launchctl load -w "${plist}"
  print_info "Installed and loaded $(LABEL). It will start at login and stay alive."
}

uninstall_agent() {
  load_env
  local plist="$(PLIST_PATH)"
  if [[ -f "${plist}" ]]; then
    launchctl unload -w "${plist}" || true
    rm -f "${plist}"
    print_info "Uninstalled LaunchAgent $(LABEL)"
  else
    print_info "No LaunchAgent to uninstall at ${plist}"
  fi
}

start_agent() {
  load_env
  launchctl start "$(LABEL)" || true
  print_info "Start signaled for $(LABEL)."
}

stop_agent() {
  load_env
  launchctl stop "$(LABEL)" || true
  print_info "Stop signaled for $(LABEL)."
}

restart_agent() {
  load_env
  local plist="$(PLIST_PATH)"
  if [[ -f "${plist}" ]]; then
    launchctl unload -w "${plist}" || true
    launchctl load -w "${plist}"
    print_info "Restarted $(LABEL)."
  else
    print_err "Plist not found. Run: ./bashy.sh install"
    exit 1
  fi
}

status_agent() {
  load_env
  local label="$(LABEL)"
  if launchctl list | grep -q "${label}"; then
    launchctl print "gui/$(id -u)/${label}" | sed -n '1,120p' | cat
  else
    print_info "${label} not loaded. Use ./bashy.sh install"
  fi
}

logs_cmd() {
  load_env
  local log="$(LOG_FILE)"
  if [[ "${1:-}" == "--follow" ]]; then
    tail -f "${log}"
  else
    tail -n 200 "${log}" || true
  fi
}

register_domain() {
  load_env
  local ip="${1:-127.0.0.1}"
  local domain="${BASHY_DOMAIN}"
  if grep -q "[[:space:]]${domain}$" /etc/hosts; then
    print_info "Domain ${domain} already in /etc/hosts"
    return 0
  fi
  local tmpfile
  tmpfile="$(mktemp)"
  sudo cp /etc/hosts "${tmpfile}.orig"
  printf "%s\t%s\n" "${ip}" "${domain}" | sudo tee -a /etc/hosts >/dev/null
  rm -f "${tmpfile}" || true
  print_info "Added ${domain} -> ${ip} to /etc/hosts"
}

unregister_domain() {
  load_env
  local domain="${BASHY_DOMAIN}"
  if ! grep -q "[[:space:]]${domain}$" /etc/hosts; then
    print_info "Domain ${domain} not found in /etc/hosts"
    return 0
  fi
  local tmp
  tmp="$(mktemp)"
  sudo awk '!($2 == "'"${domain}"'")' /etc/hosts | sudo tee "${tmp}" >/dev/null
  sudo cp "${tmp}" /etc/hosts
  rm -f "${tmp}"
  print_info "Removed ${domain} from /etc/hosts"
}

print_config() {
  load_env
  cat <<EOF
name:     ${BASHY_NAME}
domain:   ${BASHY_DOMAIN}
port:     ${BASHY_PORT}
workdir:  ${BASHY_WORKDIR}
command:  ${BASHY_COMMAND}
label:    $(LABEL)
plist:    $(PLIST_PATH)
log:      $(LOG_FILE)
extra env:${BASHY_ENV_EXTRA}
EOF
}

init_cmd() {
  # Parse flags
  local name="${BASHY_NAME}"
  local port="${BASHY_PORT}"
  local domain="${BASHY_DOMAIN}"
  local workdir="${BASHY_WORKDIR}"
  local command="${BASHY_COMMAND}"
  local env_extra="${BASHY_ENV_EXTRA}"

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --name) name="$2"; shift 2 ;;
      --port) port="$2"; shift 2 ;;
      --domain) domain="$2"; shift 2 ;;
      --workdir) workdir="$2"; shift 2 ;;
      --command) command="$2"; shift 2 ;;
      --env) env_extra="$2"; shift 2 ;;
      *) print_err "Unknown flag: $1"; exit 1 ;;
    esac
  done

  BASHY_NAME="${name}"
  BASHY_PORT="${port}"
  BASHY_DOMAIN="${domain}"
  BASHY_WORKDIR="${workdir}"
  BASHY_COMMAND="${command}"
  BASHY_ENV_EXTRA="${env_extra}"

  write_config
  print_info "You can now run: ./bashy.sh register-domain && ./bashy.sh install"
}

cmd="${1:-help}"
shift || true

case "${cmd}" in
  help|-h|--help) usage ;;
  init) init_cmd "$@" ;;
  install) install_agent ;;
  uninstall) uninstall_agent ;;
  start) start_agent ;;
  stop) stop_agent ;;
  restart) restart_agent ;;
  status) status_agent ;;
  logs) logs_cmd "${1:-}" ;;
  register-domain) register_domain "${1:-}" ;;
  unregister-domain) unregister_domain ;;
  config) print_config ;;
  *) print_err "Unknown command: ${cmd}"; usage; exit 1 ;;
esac

